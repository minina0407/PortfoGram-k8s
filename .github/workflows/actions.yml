name: BuildAndPushImagesAndTriggerManifestUpdate

on:
  push:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_REPO: minimeisme/portfogram-argocd-k8s

jobs:
  ci_cd_pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Source code checkout
        uses: actions/checkout@v3
        # bulidx 활용하는 이유 : cache를 활용하여 빌드 속도를 높이기 위해
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker registry login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Load cached Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5 #build-push-action 사용
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ github.sha }}
          cache-from: type=gha,src=/tmp/.buildx-cache # 여기서 gha는 github Actions용 캐시를 의미
          cache-to: type=gha,dest=/tmp/.buildx-cache-new

      - name: Update cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-new
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Trigger Manifest Repository Workflow
        uses: peter-evans/repository-dispatch@v2
        with:
          repository: minina0407/portfogram-mainfest
          event-type: update-manifest
          client-payload: '{"commit_hash": "${{ github.sha }}"}'
          token: ${{ secrets.MANIFEST_REPO_TOKEN }}
